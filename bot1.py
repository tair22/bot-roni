#!/usr/bin/python

from config import token
import telebot
from telebot.util import extract_arguments
from random import choice
import requests

bot = telebot.TeleBot(token)

# –ö–ª—é—á API –¥–ª—è OpenWeatherMap
WEATHER_API_KEY = "6dcc3c4ab4745739a518ab37e5d8021a"
WEATHER_URL = "http://api.openweathermap.org/data/2.5/weather"

user_cars = {}

# –ö–ª–∞—Å—Å Car
class Car:
    def __init__(self, color, brand, model="Unknown", year=2023):
        self.color = color
        self.brand = brand
        self.model = model
        self.year = year
    
    def info(self):
        return f"üöó {self.brand} {self.model} ({self.year})\n" \
               f"–¶–≤–µ—Ç: {self.color}\n" \
               
               


@bot.message_handler(commands=['car'])
def car_handler(message):
    try:
        
        args_text = extract_arguments(message.text)
        
        if not args_text:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /car <—Ü–≤–µ—Ç> <–º–∞—Ä–∫–∞> <–º–æ–¥–µ–ª—å> <–≥–æ–¥>\n\n–ü—Ä–∏–º–µ—Ä: /car –∫—Ä–∞—Å–Ω—ã–π Toyota Highlander 2010")
            return
        
        
        args = args_text.split()
        
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n–ü—Ä–∏–º–µ—Ä: /car –∫—Ä–∞—Å–Ω—ã–π Toyota Highlander 2010")
            return
        
        color = args[0]
        brand = args[1]
        model = args[2] if len(args) > 2 else "Unknown"
        year = int(args[3]) if len(args) > 3 and args[3].isdigit() else 2023
        
        
        car = Car(color, brand, model, year)
        
        
        user_id = message.from_user.id
        if user_id not in user_cars:
            user_cars[user_id] = []
        
        user_cars[user_id].append(car)
        car_number = len(user_cars[user_id])
        
        
        bot.reply_to(message, f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞ (#{car_number})!\n\n{car.info()}\n\n/mycars - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã\n\n/carinfo <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}")


@bot.message_handler(commands=['mycars'])
def mycars_handler(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_cars or not user_cars[user_id]:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /car <—Ü–≤–µ—Ç> <–º–∞—Ä–∫–∞> <–º–æ–¥–µ–ª—å> <–≥–æ–¥>")
            return
        
        cars = user_cars[user_id]
        response = f"üöó –í–∞—à–∏ –º–∞—à–∏–Ω—ã ({len(cars)} —à—Ç.):\n\n"
        
        for i, car in enumerate(cars, 1):
            response += f"#{i}. {car.info()}\n\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω: {str(e)}")


@bot.message_handler(commands=['carinfo'])
def carinfo_handler(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_cars or not user_cars[user_id]:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /car <—Ü–≤–µ—Ç> <–º–∞—Ä–∫–∞> <–º–æ–¥–µ–ª—å> <–≥–æ–¥>")
            return
        
        args_text = extract_arguments(message.text)
        if not args_text or not args_text.isdigit():
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /carinfo <–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã>\n\n–ü—Ä–∏–º–µ—Ä: /carinfo 1")
            return
        
        car_number = int(args_text)
        cars = user_cars[user_id]
        
        if car_number < 1 or car_number > len(cars):
            bot.reply_to(message, f"‚ùå –ú–∞—à–∏–Ω–∞ #{car_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£ –≤–∞—Å –µ—Å—Ç—å –º–∞—à–∏–Ω—ã —Å 1 –ø–æ {len(cars)}")
            return
        
        car = cars[car_number - 1]
        bot.reply_to(message, f"üöó –ú–∞—à–∏–Ω–∞ #{car_number}:\n\n{car.info()}")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
jokes_list = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Ç–∞–∫ –ø–ª–æ—Ö–æ —Ç–∞–Ω—Ü—É—é—Ç? –£ –Ω–∏—Ö –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞!",
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —É—Ç–∫–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç? –î–∞–∫-—Ç–∏–ø–∏—á–Ω—ã–π!",
    "–ü–æ—á–µ–º—É Python –≤—Å–µ–≥–¥–∞ –º–æ–∫—Ä—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤ –≤–æ–¥–µ!",
    "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ hardware –ø—Ä–æ–±–ª–µ–º–∞!"
]

quotes_list = [
    "–ö–æ–¥ ‚Äî —ç—Ç–æ –∫–∞–∫ —é–º–æ—Ä. –ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä—è—Å–Ω—è—Ç—å, —Ç–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–π –∫–æ–¥. ‚Äî Martin Fowler",
    "–ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ‚Äî –∫–æ—Ä–µ–Ω—å –≤—Å–µ—Ö –∑–æ–ª. ‚Äî Donald Knuth",
    "–ï—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è: –æ–¥–∏–Ω —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–º, —á—Ç–æ –≤ –Ω–µ–º –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤, –∏ –¥—Ä—É–≥–æ–π —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–º, —á—Ç–æ –≤ –Ω–µ–º –Ω–µ—Ç –æ—á–µ–≤–∏–¥–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤. ‚Äî C.A.R. Hoare",
    "–ò–∑–º–µ—Ä—è–π –¥–≤–∞–∂–¥—ã, –∫–æ–¥—å –æ–¥–∏–Ω —Ä–∞–∑. ‚Äî –ù–∞—Ä–æ–¥–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤"
]

facts_list = [
    "–ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –±–∞–≥ –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–º –Ω–∞—Å–µ–∫–æ–º—ã–º ‚Äî –º–æ—Ç—ã–ª—å–∫–æ–º, –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –≤ —Ä–µ–ª–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ Harvard Mark II –≤ 1947 –≥–æ–¥—É.",
    "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python –Ω–∞–∑–≤–∞–Ω –Ω–µ –≤ —á–µ—Å—Ç—å –∑–º–µ–∏, –∞ –≤ —á–µ—Å—Ç—å –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É 'Monty Python's Flying Circus'.",
    "–ü–∞—Ä–æ–ª—å '123456' –¥–æ —Å–∏—Ö –ø–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –≤ –º–∏—Ä–µ.",
    "–ü–µ—Ä–≤—ã–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1983 –≥–æ–¥—É –∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è 'Elk Cloner'."
]

def get_weather(city="Ufa"):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        if WEATHER_API_KEY == "your_api_key_here" or not WEATHER_API_KEY:
            return "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openweathermap.org/api"
        
        params = {
            'q': city,
            'appid': WEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        
        response = requests.get(WEATHER_URL, params=params, timeout=10)
        data = response.json()
        
        if data.get('cod') == 200:
            weather = data['weather'][0]['description'].capitalize()
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']
            city_name = data['name']
            
            weather_icons = {
                'clear': '‚òÄÔ∏è', 'clouds': '‚òÅÔ∏è', 'rain': 'üåßÔ∏è', 'snow': '‚ùÑÔ∏è',
                'thunderstorm': '‚õàÔ∏è', 'drizzle': 'üå¶Ô∏è', 'mist': 'üå´Ô∏è'
            }
            
            icon = 'üå§Ô∏è'
            weather_main = data['weather'][0]['main'].lower()
            for key in weather_icons:
                if key in weather_main:
                    icon = weather_icons[key]
                    break
            
            return f"{icon} –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n" \
                   f"‚Ä¢ {weather}\n" \
                   f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n" \
                   f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
                   f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        
        elif data.get('cod') == 401:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –Ω–∞ https://openweathermap.org/api"
        
        elif data.get('cod') == 404:
            return f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
    except requests.exceptions.Timeout:
        return "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.ConnectionError:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"



@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, """\
üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üöò –ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
/car <—Ü–≤–µ—Ç> <–º–∞—Ä–∫–∞> <–º–æ–¥–µ–ª—å> <–≥–æ–¥> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
/mycars - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã
/carinfo <–Ω–æ–º–µ—Ä> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω–µ

üé≤ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/quote - –ú—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –£—Ñ–∞)
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É

üì∏ –¢–∞–∫–∂–µ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ñ–∞–π–ª—ã!
""")


@bot.message_handler(commands=['coin'])
def coin_handler(message):
    coin = choice(["–û–†–ï–õ", "–†–ï–®–ö–ê"])
    bot.reply_to(message, f"üé≤ {coin}")

@bot.message_handler(commands=['joke'])
def joke_handler(message):
    joke = choice(jokes_list)
    bot.reply_to(message, f"üòÇ {joke}")

@bot.message_handler(commands=['quote'])
def quote_handler(message):
    quote = choice(quotes_list)
    bot.reply_to(message, f"üí° {quote}")

@bot.message_handler(commands=['fact'])
def fact_handler(message):
    fact = choice(facts_list)
    bot.reply_to(message, f"üìö {fact}")

@bot.message_handler(commands=['weather'])
def weather_handler(message):
    try:
        parts = message.text.split()
        if len(parts) > 1:
            city = ' '.join(parts[1:])
        else:
            city = "Ufa"
            
        weather_report = get_weather(city)
        bot.reply_to(message, weather_report)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    bot.reply_to(message, "üì∏ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å.")

@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    bot.reply_to(message, "üé§ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å.")

@bot.message_handler(content_types=['document'])
def document_handler(message):
    filename = message.document.file_name if message.document.file_name else "—Ñ–∞–π–ª"
    bot.reply_to(message, f"üìÑ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∞–π–ª: {filename}\n–†–∞–∑–º–µ—Ä: {message.document.file_size} –±–∞–π—Ç")

@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, f"üîÅ {message.text}")

if __name__ == "__main__":
    bot.infinity_polling()